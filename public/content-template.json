[
  {
    "title": "Getting Started with React Hooks",
    "slug": "getting-started-with-react-hooks",
    "content": "# Getting Started with React Hooks\n\nReact Hooks revolutionized how we write React components by allowing us to use state and other React features in functional components.\n\n## What are React Hooks?\n\nHooks are functions that let you \"hook into\" React state and lifecycle features from function components. They don't work inside classes â€” they let you use React without classes.\n\n## Basic Hooks\n\n### useState\n\nThe `useState` hook lets you add state to functional components:\n\n```javascript\nimport React, { useState } from 'react';\n\nfunction Counter() {\n  const [count, setCount] = useState(0);\n\n  return (\n    <div>\n      <p>You clicked {count} times</p>\n      <button onClick={() => setCount(count + 1)}>\n        Click me\n      </button>\n    </div>\n  );\n}\n```\n\n### useEffect\n\nThe `useEffect` hook lets you perform side effects in function components:\n\n```javascript\nimport React, { useState, useEffect } from 'react';\n\nfunction Example() {\n  const [count, setCount] = useState(0);\n\n  useEffect(() => {\n    document.title = `You clicked ${count} times`;\n  });\n\n  return (\n    <div>\n      <p>You clicked {count} times</p>\n      <button onClick={() => setCount(count + 1)}>\n        Click me\n      </button>\n    </div>\n  );\n}\n```\n\n## Best Practices\n\n1. **Only call hooks at the top level** - Don't call hooks inside loops, conditions, or nested functions\n2. **Use the ESLint plugin** - Install `eslint-plugin-react-hooks` to catch common mistakes\n3. **Custom hooks for reusable logic** - Extract component logic into custom hooks when you want to share it between multiple components\n\n## Conclusion\n\nReact Hooks provide a more direct API to the React concepts you already know. They give you access to escape hatches and don't require you to learn complex functional or reactive programming techniques.",
    "featuredImageUrl": "https://images.pexels.com/photos/11035380/pexels-photo-11035380.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=2",
    "metaDescription": "Learn the fundamentals of React Hooks and how they revolutionize functional component development. Complete guide with examples and best practices.",
    "seoTitle": "React Hooks Guide: useState, useEffect & Best Practices",
    "keywords": ["react", "hooks", "useState", "useEffect", "javascript", "frontend", "web development"],
    "author": "John Developer",
    "categories": ["Web Development", "React", "JavaScript"],
    "tags": ["react", "hooks", "javascript", "tutorial", "frontend", "programming"],
    "status": "published"
  },
  {
    "title": "Building Responsive Web Layouts with CSS Grid",
    "slug": "building-responsive-web-layouts-css-grid",
    "content": "# Building Responsive Web Layouts with CSS Grid\n\nCSS Grid Layout is a two-dimensional layout system for the web. It lets you lay content out in rows and columns, and has many features that make building complex layouts straightforward.\n\n## Why CSS Grid?\n\nCSS Grid is perfect for creating complex, responsive layouts that were previously difficult or impossible with other CSS layout methods:\n\n- **Two-dimensional control** - Control both rows and columns simultaneously\n- **Responsive by design** - Built-in features for responsive layouts\n- **Alignment control** - Precise control over item placement and alignment\n- **Gap control** - Easy spacing between grid items\n\n## Basic Grid Setup\n\nTo create a grid container, simply set `display: grid` on an element:\n\n```css\n.grid-container {\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  grid-template-rows: auto;\n  gap: 20px;\n}\n```\n\n## Responsive Grid Example\n\nHere's a responsive grid that adapts to different screen sizes:\n\n```css\n.responsive-grid {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\n  gap: 2rem;\n  padding: 2rem;\n}\n\n@media (max-width: 768px) {\n  .responsive-grid {\n    grid-template-columns: 1fr;\n    gap: 1rem;\n    padding: 1rem;\n  }\n}\n```\n\n## Grid Areas\n\nYou can name grid areas for more semantic layouts:\n\n```css\n.layout {\n  display: grid;\n  grid-template-areas:\n    \"header header header\"\n    \"sidebar main main\"\n    \"footer footer footer\";\n  grid-template-columns: 200px 1fr 1fr;\n  grid-template-rows: auto 1fr auto;\n  min-height: 100vh;\n}\n\n.header { grid-area: header; }\n.sidebar { grid-area: sidebar; }\n.main { grid-area: main; }\n.footer { grid-area: footer; }\n```\n\n## Advanced Techniques\n\n### Implicit Grid\n\nCSS Grid can automatically create rows and columns as needed:\n\n```css\n.auto-grid {\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));\n  grid-auto-rows: 200px;\n  gap: 1rem;\n}\n```\n\n### Subgrid (Future)\n\nSubgrid allows nested grids to participate in the parent grid's sizing:\n\n```css\n.parent-grid {\n  display: grid;\n  grid-template-columns: repeat(4, 1fr);\n}\n\n.child-grid {\n  display: grid;\n  grid-column: span 2;\n  grid-template-columns: subgrid;\n}\n```\n\n## Browser Support\n\nCSS Grid has excellent browser support:\n- Chrome 57+\n- Firefox 52+\n- Safari 10.1+\n- Edge 16+\n\n## Conclusion\n\nCSS Grid is a powerful layout system that makes creating responsive, complex layouts much easier. Combined with Flexbox for one-dimensional layouts, you have all the tools needed for modern web design.",
    "featuredImageUrl": "https://images.pexels.com/photos/196644/pexels-photo-196644.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=2",
    "metaDescription": "Master CSS Grid Layout for creating responsive, complex web layouts. Complete guide with examples, best practices, and browser support information.",
    "seoTitle": "CSS Grid Layout Guide: Responsive Web Design Made Easy",
    "keywords": ["css", "grid", "layout", "responsive", "web design", "frontend", "css3"],
    "author": "Jane Designer",
    "categories": ["Web Development", "CSS", "Design"],
    "tags": ["css", "grid", "layout", "responsive", "design", "frontend", "web"],
    "status": "published"
  },
  {
    "title": "Introduction to TypeScript for JavaScript Developers",
    "slug": "introduction-typescript-javascript-developers",
    "content": "# Introduction to TypeScript for JavaScript Developers\n\nTypeScript is a strongly typed programming language that builds on JavaScript, giving you better tooling at any scale.\n\n## What is TypeScript?\n\nTypeScript is JavaScript with syntax for types. It's a superset of JavaScript that compiles to plain JavaScript code.\n\n### Key Benefits\n\n- **Static Type Checking** - Catch errors at compile time\n- **Enhanced IDE Support** - Better autocomplete, refactoring, and navigation\n- **Modern JavaScript Features** - Use latest ECMAScript features\n- **Gradual Adoption** - Add types incrementally to existing projects\n\n## Basic Types\n\n### Primitive Types\n\n```typescript\nlet isDone: boolean = false;\nlet decimal: number = 6;\nlet color: string = \"blue\";\nlet list: number[] = [1, 2, 3];\nlet x: [string, number] = [\"hello\", 10]; // Tuple\n```\n\n### Interfaces\n\nInterfaces define the shape of objects:\n\n```typescript\ninterface User {\n  id: number;\n  name: string;\n  email: string;\n  isActive?: boolean; // Optional property\n}\n\nfunction createUser(user: User): User {\n  return {\n    ...user,\n    isActive: user.isActive ?? true\n  };\n}\n```\n\n### Functions\n\nType function parameters and return values:\n\n```typescript\nfunction add(x: number, y: number): number {\n  return x + y;\n}\n\nconst multiply = (x: number, y: number): number => x * y;\n\n// Optional parameters\nfunction buildName(firstName: string, lastName?: string): string {\n  return lastName ? `${firstName} ${lastName}` : firstName;\n}\n```\n\n## Advanced Features\n\n### Generics\n\nCreate reusable components with generics:\n\n```typescript\nfunction identity<T>(arg: T): T {\n  return arg;\n}\n\ninterface ApiResponse<T> {\n  data: T;\n  status: number;\n  message: string;\n}\n\ntype UserResponse = ApiResponse<User>;\n```\n\n### Union Types\n\n```typescript\ntype Status = \"loading\" | \"success\" | \"error\";\ntype ID = string | number;\n\nfunction handleResponse(status: Status): void {\n  switch (status) {\n    case \"loading\":\n      console.log(\"Loading...\");\n      break;\n    case \"success\":\n      console.log(\"Success!\");\n      break;\n    case \"error\":\n      console.log(\"Error occurred\");\n      break;\n  }\n}\n```\n\n## Getting Started\n\n1. **Install TypeScript**:\n   ```bash\n   npm install -g typescript\n   ```\n\n2. **Create tsconfig.json**:\n   ```json\n   {\n     \"compilerOptions\": {\n       \"target\": \"es2020\",\n       \"module\": \"commonjs\",\n       \"strict\": true,\n       \"esModuleInterop\": true\n     }\n   }\n   ```\n\n3. **Compile TypeScript**:\n   ```bash\n   tsc app.ts\n   ```\n\n## Migration Strategy\n\n1. Start by renaming `.js` files to `.ts`\n2. Add type annotations gradually\n3. Enable strict mode incrementally\n4. Use `any` type sparingly as an escape hatch\n\n## Conclusion\n\nTypeScript enhances JavaScript development with static typing, better tooling, and improved code quality. Start small and gradually adopt more TypeScript features as you become comfortable with the language.",
    "featuredImageUrl": "https://images.pexels.com/photos/4164418/pexels-photo-4164418.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=2",
    "metaDescription": "Learn TypeScript fundamentals for JavaScript developers. Complete guide covering types, interfaces, generics, and migration strategies with practical examples.",
    "seoTitle": "TypeScript for JavaScript Developers: Complete Beginner Guide",
    "keywords": ["typescript", "javascript", "types", "programming", "web development", "static typing"],
    "author": "Alex Coder",
    "categories": ["Programming", "TypeScript", "JavaScript"],
    "tags": ["typescript", "javascript", "programming", "types", "development", "tutorial"],
    "status": "draft"
  }
]
